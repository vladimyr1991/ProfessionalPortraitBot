from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from asyncio import Lock
from . import keyboards as kb
from .database import create_user, user_registered, create_order, OrderStatus, save_image, get_list_of_admin_users, update_order_status, get_order_by_telegram_id, get_amount_of_pictures_in_order
from .database import ImageType
from aiohttp import ClientSession
import os
import re
import logging
import sqlalchemy as sa

TOKEN: str = os.environ.get("TOKEN")
order_creation_lock = Lock()

router = Router()

ADMIN_USERS = set()


async def load_admin_users():
    global ADMIN_USERS
    ADMIN_USERS = await get_list_of_admin_users()


async def get_photo(file_id: str, bot: Bot) -> bytes:
    async with ClientSession() as session:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        download_url = f'https://api.telegram.org/file/bot{TOKEN}/{file_path}'

        async with session.get(download_url) as response:
            if response.status == 200:
                return await response.read()
            logging.error('Error downloading')
            raise FileNotFoundError()


def is_email(email: str) -> bool:
    """Verifies if string is an email"""

    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'

    if re.match(pattern, email):
        return True
    else:
        return False


@router.message(CommandStart())
async def cmd_start(message: Message):
    # TODO:
    # –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    welcome_message = (
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @ProfessionalPortraitBot, –≤–∞—à–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ª–æ–≤—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤! üåü\n"
        "–° ProfessionalPortraitBot –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ–ª–æ–≤—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã.)\n" 
        "–í—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, —ç—Ç–æ:\n" 
        "- –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ\n"
        "- –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É\n"
        "- –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –ø–æ—Ä—Ç—Ä–µ—Ç—ã\n"
        "–ü–æ–≤—ã—Å—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–∏–¥–∂ —Å ProfessionalPortraitBot —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!\n"
    )
    await message.answer(welcome_message, reply_markup=kb.main)


class CreateOrderForPortrait(StatesGroup):
    order_id = State()
    email = State()
    photo_count = State()


@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç")
async def order_portrait(message: Message, state: FSMContext):
    if not await user_registered(message.from_user.id):
        await state.set_state(CreateOrderForPortrait.email)
        await state.update_data(photo_count=0)
        await message.answer("–í—ã —É –Ω–∞—Å –ø–µ—Ä–≤—ã–π —Ä–∞–∑. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å", reply_markup=ReplyKeyboardRemove())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email")
    else:
        await state.set_state(CreateOrderForPortrait.photo_count)
        await message.answer(
            text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 11 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ.\n–ß–µ–º –ª—É—á—à–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–µ–º –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ",
            reply_markup=ReplyKeyboardRemove()
            )


@router.message(CreateOrderForPortrait.email)
async def order_input_email(message: Message, state: FSMContext):
    if not is_email(message.text):
        await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–µ–π–ª.")
    else:
        await create_user(telegram_id=message.from_user.id, telegram_name=message.from_user.username, email=message.text)
        await state.set_state(CreateOrderForPortrait.photo_count)
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 11 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ.\n\n–ß–µ–º –ª—É—á—à–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–µ–º –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ")


@router.message(CreateOrderForPortrait.photo_count)
async def order_input_photo_count(message: Message, bot: Bot, state: FSMContext):
    async with order_creation_lock:
        data = await state.get_data()
        try:
            order = await get_order_by_telegram_id(telegram_id=message.from_user.id)
        except sa.exc.MultipleResultsFound():
            raise ValueError("Collision with orders. Can not exist two orders with the same status PREPARATION")
        if order is None:
            order = await create_order(
                telegram_id=message.from_user.id,
                order_status=OrderStatus.PREPARATION,
                )
            await state.update_data(order_id=order.id)
            await state.set_state(CreateOrderForPortrait.photo_count)

        file_id = message.photo[-1].file_id
        image_binary = await get_photo(file_id=file_id, bot=bot)
        counter = data.get("photo_count", 0)
        await save_image(order_id=order.id, image_binary=image_binary, image_type=ImageType.RAW)
        counter += 1
        await state.update_data(photo_count=counter)

        if counter < 3:
            await message.answer(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ {counter} –∏–∑ –º–∏–Ω–∏–º—É–º–∞ 11 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å")
        else:
            await state.update_data(order_id=order.id, photo_count=counter)
            await state.set_state(CreateOrderForPortrait.photo_count)
            await message.answer(f"–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ {counter} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
            await message.answer("–≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∂–∞—Ç—å –µ—â–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
            await message.answer( f"\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'", reply_markup=await kb.finish_upload_kb())


@router.callback_query(CreateOrderForPortrait.photo_count)
async def order_input_photo_finish(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.data == "finish_upload":
        await state.clear()
        await update_order_status(order_id=data.get('order_id'), order_status=OrderStatus.PAYMENT_APPROVAL_REQUIRED)
        await callback.message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        await callback.message.answer(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{data.get('order_id')}.")
        await callback.message.answer(
            f"\n–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –°–ë–ü –≤ —Ä–∞–∑–º–µ—Ä–µ 5000 —Ä—É–±–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä—É +79116075951."
            f"\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥–∞–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ."
        )


@router.message(F.text == "/start")
async def order_portrait(message: Message):
    if not await user_registered(message.from_user.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email")
    else:
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 11 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ.")


@router.message(Command('admin'))
async def admin_command(message: Message, bot: Bot):
    await load_admin_users()

    if message.from_user.id not in ADMIN_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü–∞–Ω–µ–ª—å –ê–¥–∏–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=ReplyKeyboardRemove()
            )
        await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏",
            reply_markup=await kb.admin_inline_kb()
            )


@router.callback_query(F.data == "return")
async def admin_command(callback: CallbackQuery):
    await cmd_start(callback.message)


class ChangeOrderState(StatesGroup):
    order_id = State()
    state = State()


@router.callback_query(F.data == "change_status")
async def admin_command(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await load_admin_users()
    if callback.from_user.id not in ADMIN_USERS:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await callback.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")
        await state.set_state(ChangeOrderState.order_id)
        try:
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", reply_markup=await kb.order_list_inline_kb(operation_type=callback.data))
        except ValueError as e:
            await callback.message.answer("–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            await state.clear()


@router.callback_query(ChangeOrderState.order_id)
async def admin_change_state_step_2(callback: CallbackQuery, state: FSMContext):
    await state.update_data(order_id=callback.message.text)
    await state.set_state(ChangeOrderState.state)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å", reply_markup=await kb.status_list_inline_kb())


@router.callback_query(ChangeOrderState.state)
async def admin_change_state_step_3(callback: CallbackQuery, state: FSMContext):
    if callback.data != "return":
        await state.update_data(state=callback.message.text)
        data = await state.get_data()
        await callback.message.answer(f'–ó–∞–∫–∞–∑  ‚Ññ{data.get("order_id")} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å {data.get("state")}')
        await state.clear()
    else:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å", reply_markup=await kb.status_list_inline_kb())
    await state.clear()


class UploadProcessedPhotos(StatesGroup):
    order_id = State()
    photo_count = State()


@router.callback_query(F.data == "upload_photo")
async def admin_upload_photos_step_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await load_admin_users()
    if callback.from_user.id not in ADMIN_USERS:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await state.set_state(UploadProcessedPhotos.order_id)
        try:
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ", reply_markup=await kb.order_list_inline_kb(operation_type=callback.data))
        except ValueError as e:
            await callback.message.answer("–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            await state.clear()


@router.callback_query(UploadProcessedPhotos.order_id)
async def admin_upload_photos_step_2(callback: CallbackQuery, state: FSMContext):
    await state.update_data(order_id=callback.data.split("_")[1])
    await state.update_data(photo_count=0)
    await state.set_state(UploadProcessedPhotos.photo_count)
    await callback.message.answer("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–æ 20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.")


@router.message(UploadProcessedPhotos.photo_count)
async def admin_upload_photos_step_3(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    file_id = message.photo[-1].file_id
    counter = int(data["photo_count"])
    if counter < 20:
        image_binary = await get_photo(file_id=file_id, bot=bot)
        await save_image(order_id=data.get('order_id'), image_binary=image_binary, image_type=ImageType.PROCESSED)
        counter += 1
        await state.update_data(photo_count=counter)
        await state.set_state(UploadProcessedPhotos.photo_count)
        await message.answer(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ {counter} –∏–∑ 20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å")
    else:
        await state.clear()  # Clear the state to conclude the image upload process
        await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
